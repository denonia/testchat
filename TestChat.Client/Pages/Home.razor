@page "/"
@using TestChat.Client.Services
@using TestChat.Client.Components
@inject IChatService ChatService
@inject ToastService ToastService
@implements IAsyncDisposable

<h3>@RoomTitle</h3>

<div id="scroller">
    <Chat History="@ChatService.ActiveChat"/>
    <div id="anchor"></div>
</div>
<div class="sticky-bottom bg-body">
    <MessageInput OnMessageSent="SendMessage"/>
</div>

@code {

    private string RoomTitle => ChatService.ActiveUser is not null
        ? $"Private chat with {ChatService.ActiveUser.DisplayName}"
        : "Public chat";

    private async Task SendMessage(string text) => await ChatService.SendMessageAsync(text);

    private void OnNameChangeSuccess() =>
        ToastService.Notify(new ToastMessage(ToastType.Success, "Name changed successfully."));

    private void OnNameChangeFail() =>
        ToastService.Notify(new ToastMessage(ToastType.Danger, "Name is not available!"));

    protected override async Task OnInitializedAsync()
    {
        await ChatService.ConnectAsync();
        ChatService.OnChange += StateHasChanged;
        ChatService.OnNameChangeSuccess += OnNameChangeSuccess;
        ChatService.OnNameChangeFail += OnNameChangeFail;
    }

    public async ValueTask DisposeAsync()
    {
        await ChatService.DisposeAsync();
        ChatService.OnChange -= StateHasChanged;
        ChatService.OnNameChangeSuccess -= OnNameChangeSuccess;
        ChatService.OnNameChangeFail -= OnNameChangeFail;
    }

}