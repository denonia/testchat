@using TestChat.Client.Services
@inject IChatService ChatService
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">TestChat</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link cursor-pointer" @onclick="() => ChatService.ChangeRoom()">
                <span class="bi bi-house-door-fill mt-2 mx-2 d-flex"></span> Public chat
                @if (ChatService.PublicChat.UnreadMessages > 0)
                {
                    <span class="badge bg-danger mx-2">@ChatService.PublicChat.UnreadMessages</span>
                }
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link">
                <span class="bi bi-people-fill mt-2 mx-2 d-flex"></span> Online users
                <span class="badge bg-secondary mx-2">@ChatService.Users.Count</span>
            </NavLink>
        </div>
        @foreach (var user in ChatService.Users)
        {
            <div class="nav-item px-3 cursor-pointer">
                <NavLink class="nav-link" @onclick="() => ChatService.ChangeRoom(user.ConnectionId)">
                    @user.DisplayName 
                    @if (user.History.UnreadMessages > 0)
                    {
                        <span class="badge bg-danger mx-2">@user.History.UnreadMessages</span>
                    }
                </NavLink>
            </div>
        }
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        ChatService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ChatService.OnChange -= StateHasChanged;
    }

}